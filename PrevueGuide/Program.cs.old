using System.Diagnostics;

// Original: https://jsayers.dev/category/c-sdl-tutorial-series/

#define USE_SAYERS_SDL
// #define USE_SDL_SHARP_64BITS // SDL-Sharp_64-bits

#if USE_SAYERS_SDL
using SDL2;
IntPtr window;
IntPtr renderer;
#elif USE_SDL_SHARP_64BITS
using SDL_Sharp;
Window window;
Renderer renderer;
#endif

var running = true;

Setup();

var frameCount = 0;
var stopWatch = new Stopwatch();
stopWatch.Start();

while (running)
{
    PollEvents();
    Render();

    // Write render statistics
    if (frameCount >= 300)
    {
        frameCount = 0;
        stopWatch.Stop();
        var ms = stopWatch.ElapsedMilliseconds;
        stopWatch.Restart();
        Console.WriteLine($"Time per frame: {ms/300} ms");
    }

    frameCount++;
}

CleanUp();

/// <summary>
/// Setup all of the SDL resources we'll need to display a window.
/// </summary>
void Setup()
{
    // Initilizes SDL.
    #if USE_SAYERS_SDL
    if (SDL.SDL_Init(SDL.SDL_INIT_VIDEO) < 0)
        Console.WriteLine($"There was an issue initializing SDL. {SDL.SDL_GetError()}");
    #elif USE_SDL_SHARP_64BITS
    if (SDL.Init(SdlInitFlags.Video) < 0)
        Console.WriteLine($"There was an issue initializing SDL. {SDL.GetErrorString()}");
    #endif

    // Create a new window given a title, size, and passes it a flag indicating it should be shown.
    #if USE_SAYERS_SDL
    window = SDL.SDL_CreateWindow("Prevue Guide", SDL.SDL_WINDOWPOS_UNDEFINED, SDL.SDL_WINDOWPOS_UNDEFINED,
        720, 480, SDL.SDL_WindowFlags.SDL_WINDOW_SHOWN);
    #elif USE_SDL_SHARP_64BITS
    window = SDL.CreateWindow("Prevue Guide", SDL.WINDOWPOS_UNDEFINED, SDL.WINDOWPOS_UNDEFINED, 720, 480,
        WindowFlags.Shown);
    #endif

    if (window == IntPtr.Zero)
    {
        #if USE_SAYERS_SDL
        Console.WriteLine($"There was an issue creating the window. {SDL.SDL_GetError()}");
        #elif USE_SDL_SHARP_64BITS
        Console.WriteLine($"There was an issue creating the window. {SDL_Sharp.SDL.GetErrorString()}");
        #endif
    }

    // Creates a new SDL hardware renderer using the default graphics device with VSYNC enabled.
    #if USE_SAYERS_SDL
    renderer = SDL.SDL_CreateRenderer(window, -1, SDL.SDL_RendererFlags.SDL_RENDERER_ACCELERATED |
                                                  SDL.SDL_RendererFlags.SDL_RENDERER_PRESENTVSYNC);
    #elif USE_SDL_SHARP_64BITS
    renderer = SDL_Sharp.SDL.CreateRenderer(window, -1, RendererFlags.Accelerated | RendererFlags.PresentVsync);
    #endif

    if (renderer == IntPtr.Zero)
    {
        #if USE_SAYERS_SDL
        Console.WriteLine($"There was an issue creating the renderer. {SDL.SDL_GetError()}");
        #elif USE_SDL_SHARP_64BITS
        Console.WriteLine($"There was an issue creating the renderer. {SDL_Sharp.SDL.GetErrorString()}");
        #endif
    }

    #if USE_SAYERS_SDL
    SDL.SDL_SetRenderDrawBlendMode(renderer, SDL.SDL_BlendMode.SDL_BLENDMODE_BLEND);
    #elif USE_SDL_SHARP_64BITS
    SDL.SetRenderDrawBlendMode(renderer, BlendMode.Blend);
    #endif
}

/// <summary>
/// Checks to see if there are any events to be processed.
/// </summary>
void PollEvents()
{
    // Check to see if there are any events and continue to do so until the queue is empty.
    // while (SDL.SDL_PollEvent(out SDL.SDL_Event e) == 1)
    while (SDL_Sharp.SDL.PollEvent(out SDL_Sharp.Event e) == 1)
    {
        // switch (e.type)
        switch (e.Type)
        {
            // case SDL.SDL_EventType.SDL_QUIT:
            case SDL_Sharp.EventType.Quit:
                running = false;
                break;
        }
    }
}

/// <summary>
/// Renders to the window.
/// </summary>
void Render()
{
    // Sets the color that the screen will be cleared with.
    // SDL.SDL_SetRenderDrawColor(renderer, 135, 206, 235, 255);
    SDL_Sharp.SDL.SetRenderDrawColor(renderer, 135, 206, 235, 255);

    // Clears the current render surface.
    // SDL.SDL_RenderClear(renderer);
    SDL_Sharp.SDL.RenderClear(renderer);

    // Set the color to red before drawing our shape
    // SDL.SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255);
    SDL_Sharp.SDL.SetRenderDrawColor(renderer, 255, 0, 0, 255);

    // Draw a line from top left to bottom right
    // SDL.SDL_RenderDrawLine(renderer, 0, 0, 640, 480);
    SDL_Sharp.SDL.RenderDrawLine(renderer, 0, 0, 640, 480);

    // Draws a point at (20, 20) using the currently set color.
    // SDL.SDL_RenderDrawPoint(renderer, 20, 20);
    SDL_Sharp.SDL.RenderDrawPoint(renderer, 20, 20);

    // Specify the coordinates for our rectangle we will be drawing.
    // var rect = new SDL.SDL_Rect { x = 300, y = 100, w = 50, h = 50 };
    var rect = new SDL_Sharp.Rect { X = 300, Y = 100, Width = 50, Height = 50 };

    // Draw a filled in rectangle.
    // SDL.SDL_RenderFillRect(renderer, ref rect);
    SDL_Sharp.SDL.RenderFillRect(renderer, ref rect);

    // Switches out the currently presented render surface with the one we just did work on.
    // SDL.SDL_RenderPresent(renderer);
    SDL_Sharp.SDL.RenderPresent(renderer);
}

/// <summary>
/// Clean up the resources that were created.
/// </summary>
void CleanUp()
{
    #if USE_SAYERS_SDL
    SDL.SDL_DestroyRenderer(renderer);
    SDL.SDL_DestroyWindow(window);
    SDL.SDL_Quit();
    #elif USE_SDL_SHARP_64BITS
    SDL.DestroyRenderer(renderer);
    SDL.DestroyWindow(window);
    SDL.Quit();
    #endif
}
